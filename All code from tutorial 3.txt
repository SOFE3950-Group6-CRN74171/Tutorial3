// Question 1:
#include <stdio.h>

int main() {
    char firstName[50]; 
    int age;
    float height;

    printf("Enter your first name: ");
    scanf("%s", firstName);

    printf("Enter your age: ");
    scanf("%d", &age);

    printf("Enter your height (in meters): ");
    scanf("%f", &height);

    printf("\nFirst Name: %s\n", firstName);
    printf("Age: %d\n", age);
    printf("Height: %.2f meters\n", height);

    return 0;
}

////////////////////////////////////////////////////////////////
// Question 2:
#include <stdio.h>

#define ARRAY_SIZE 10

int main() {
    
    FILE *file;
    int numbers[ARRAY_SIZE];

    // Open the file for reading
    file = fopen("question2.txt", "r");

    // Check if the file was opened successfully
    if (file == NULL) {
        printf("Error opening the file.\n");
        return 1; // Exit with an error code
    }

    // Read ten integers from the file and store them in the array
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        fscanf(file, "%d", &numbers[i]);
    }

    // Close the file
    fclose(file);

    // Print the contents of the array
    printf("Array contents: ");
    for (int i = 0; i < ARRAY_SIZE; ++i) {
        printf("%d ", numbers[i]);
    }
    printf("\n");

    return 0;
}

////////////////////////////////////////////////////////////////
// Question 3:
#include <stdio.h>

// Student Struct
struct Student {
    //Student struct needs ID, Age, and Start year.
    int student_id;
    int age;
    int start_year;
};

// Function returns void and takes Student struct as an argument
void save_student(struct Student student) {
    // Open the file "student.txt" in append mode
    FILE *file = fopen("students.txt", "a");

    // Check if the file is opened successfully
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    // Save student data to the file
    fprintf(file, "%d,%d,%d\n", student.student_id, student.age, student.start_year);

    // Close the file
    fclose(file);
}

int main() {
    // Create a structure type of student
    struct Student student;

    // Prompt user for input
    printf("Enter student id: ");
    scanf("%d", &student.student_id);

    printf("Enter age: ");
    scanf("%d", &student.age);

    printf("Enter the year started at UOIT: ");
    scanf("%d", &student.start_year);
    //run the function to save input
    save_student(student);

    printf("Done!\n");

    return 0;
}
////////////////////////////////////////////////////////////////
// Question 4:
#include <stdio.h>
#include <stdlib.h>

int main() {
    // Declare character pointer
    char *professor;
    // Declare integer pointer
    int *student_ids, *grades;

    // Using Calloc to allocate memory {ptr = (cast-type*)calloc(n, element-size);}
    professor = (char *)calloc(256, sizeof(char));

    // Check if memory allocation is successful
    if (professor == NULL) {
        printf("Memory allocation for professor failed.\n");
        return 1;
    }

    // Prompt the professor for their name
    printf("Enter professor's name: ");
    scanf("%255s", professor);  // Limit input to 255 characters to avoid buffer overflow

    // Prompt the professor for the number of students to mark
    int num_students;
    printf("Enter the number of students to mark: ");
    scanf("%d", &num_students);

    // Using malloc to allocate the memory to the number of students and their grade
    // {ptr = (cast-type*) malloc(byte-size)}
    student_ids = (int *)malloc(num_students * sizeof(int));
    grades = (int *)malloc(num_students * sizeof(int));

    // Check if memory allocation is successful
    if (student_ids == NULL)
        printf("Memory allocation for student_ids failed.\n");
    if (grades == NULL) {
        printf("Memory allocation for grades failed.\n");

        // Free previously allocated memory
        free(professor);

        // Free any allocated memory before terminating
        if (student_ids != NULL) {
            free(student_ids);
        }
        if (grades != NULL) {
            free(grades);
        }

        return 1;
    }

    // Free allocated memory before terminating
    free(professor);
    free(student_ids);
    free(grades);

    return 0;
}
////////////////////////////////////////////////////////////////
// Question 5:

#include <stdio.h>
#include <stdlib.h>
#include <math.h>

// Define the grade struct
struct Grade {
    int student_id;
    int mark;
};

// Function to grade students and calculate statistics
void grade_students(struct Grade *grades, int num_students) {
    // Open the file grades.txt in write mode
    FILE *file = fopen("grades.txt", "w");

    // Check if the file is opened successfully
    if (file == NULL) {
        printf("Error opening file.\n");
        return;
    }

    // Initialize variables for sum, mean, and standard deviation
    double sum = 0.0;
    double mean, variance = 0.0, standard_deviation;

    // Write student id and mark to the file and calculate sum
    for (int i = 0; i < num_students; ++i) {
        fprintf(file, "%d %d\n", grades[i].student_id, grades[i].mark);
        sum += grades[i].mark;
    }

    // Calculate mean
    mean = sum / num_students;

    // Calculate variance
    for (int i = 0; i < num_students; ++i) {
        variance += pow(grades[i].mark - mean, 2);
    }
    variance /= num_students;

    // Calculate standard deviation
    standard_deviation = sqrt(variance);

    // Write mean and standard deviation to the file
    fprintf(file, "Average: %.2f\n", mean);
    fprintf(file, "Standard Deviation: %.2f\n", standard_deviation);

    // Close the file
    fclose(file);
}

int main() {
    // Declare pointers
    char *professor;
    struct Grade *grades;

    // Allocate memory for the professor pointer using calloc
    professor = (char *)calloc(256, sizeof(char));

    // Check if memory allocation is successful
    if (professor == NULL) {
        printf("Memory allocation for professor failed.\n");
        return 1;
    }

    // Prompt the professor for their name
    printf("Enter professor's name: ");
    scanf("%255s", professor);  // Limit input to 255 characters to avoid buffer overflow

    // Prompt the professor for the number of students to mark
    int num_students;
    printf("Enter the number of students to mark: ");
    scanf("%d", &num_students);

    // Allocate memory for the grades pointer using malloc
    grades = (struct Grade *)malloc(num_students * sizeof(struct Grade));

    // Check if memory allocation is successful
    if (grades == NULL) {
        printf("Memory allocation for grades failed.\n");

        // Free previously allocated memory
        free(professor);

        return 1;
    }

    // Prompt the professor for student ids and marks
    for (int i = 0; i < num_students; ++i) {
        printf("Enter student id for student %d: ", i + 1);
        scanf("%d", &grades[i].student_id);

        printf("Enter mark for student %d: ", i + 1);
        scanf("%d", &grades[i].mark);
    }

    // Call the function to grade students, calculate statistics, and store results
    grade_students(grades, num_students);

    // Free allocated memory before terminating
    free(professor);
    free(grades);

    return 0;
}